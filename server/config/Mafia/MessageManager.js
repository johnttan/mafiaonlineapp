// Generated by CoffeeScript 1.6.3
(function() {
  var MessageManager,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  MessageManager = (function() {
    function MessageManager(io, ioNamespace, gameEngine) {
      this.gameEngine = gameEngine;
      this.publicState = gameEngine.getAllPublicState();
      this.ioNamespace = ioNamespace;
      this.io = io;
    }

    MessageManager.prototype.nextTurn = function() {
      return this.synchChats();
    };

    MessageManager.prototype.addPlayer = function() {
      return this.synchChats();
    };

    MessageManager.prototype.removePlayer = function(playerName) {};

    MessageManager.prototype.synchChats = function() {
      var inside, playerPublicState, room, socket, _i, _len, _ref, _results;
      _ref = this.ioNamespace.sockets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        socket = _ref[_i];
        playerPublicState = this.publicState[socket.playerName];
        if (playerPublicState !== void 0) {
          _results.push((function() {
            var _ref1, _results1;
            _ref1 = playerPublicState.chats;
            _results1 = [];
            for (room in _ref1) {
              inside = _ref1[room];
              if (inside) {
                _results1.push(socket.join(room));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    MessageManager.prototype.sendMessage = function(socket, messageObject) {
      var _ref;
      if (this.gameEngine.getTurn() % 2 !== 0) {
        return this.io.to('public').emit(messageObject.message);
      } else {
        if (_ref = messageObject.room, __indexOf.call(this.publicState[socket.playerName], _ref) >= 0) {
          return this.io.to(messageObject.room).emit('chat', messageObject.message);
        }
      }
    };

    return MessageManager;

  })();

  exports.MessageManager = MessageManager;

}).call(this);

/*
//@ sourceMappingURL=MessageManager.map
*/
