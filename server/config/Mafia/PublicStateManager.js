// Generated by CoffeeScript 1.6.3
(function() {
  var PublicStateManager,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  PublicStateManager = (function() {
    function PublicStateManager() {
      this.publicState = {};
    }

    PublicStateManager.prototype.nextTurn = function(turn) {
      var player, playername, _ref, _results;
      _ref = this.publicState;
      _results = [];
      for (playername in _ref) {
        if (!__hasProp.call(_ref, playername)) continue;
        player = _ref[playername];
        _results.push(player.turn = turn);
      }
      return _results;
    };

    PublicStateManager.prototype.addPlayer = function(playerObject, gameEngine, config) {
      var player, playername, _ref, _ref1;
      this.publicState[playerObject.currentState.name] = playerObject.roleObject.publicStateInitialize(playerObject, gameEngine, config);
      _ref = this.publicState;
      for (playername in _ref) {
        if (!__hasProp.call(_ref, playername)) continue;
        player = _ref[playername];
        if (_ref1 = playerObject.currentState.name, __indexOf.call(player.publicPlayers, _ref1) < 0) {
          player.publicPlayers[playerObject.currentState.name] = {};
        }
      }
      return true;
    };

    PublicStateManager.prototype.removePlayer = function(playerName, preStart, role) {
      var player, playerO, _ref;
      if (playerName in this.publicState) {
        _ref = this.publicState;
        for (player in _ref) {
          if (!__hasProp.call(_ref, player)) continue;
          playerO = _ref[player];
          delete playerO.publicPlayers[playerName];
          if (!playerO.grave) {
            playerO.grave = {};
          }
          if (!preStart) {
            console.log('game started, adding to graveyard, ', playerName);
            playerO.grave[playerName] = {
              role: role
            };
          }
        }
        return true;
      } else {
        return false;
      }
    };

    PublicStateManager.prototype.getAllPublicState = function() {
      return this.publicState;
    };

    PublicStateManager.prototype.getPublicState = function(playername) {
      return this.publicState[playername];
    };

    return PublicStateManager;

  })();

  exports.PublicStateManager = PublicStateManager;

}).call(this);

/*
//@ sourceMappingURL=PublicStateManager.map
*/
