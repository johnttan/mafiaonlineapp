// Generated by CoffeeScript 1.6.3
(function() {
  var Config, GameLobby, QueueManager, UserManager, uuid;

  GameLobby = require('./GameLobby').GameLobby;

  uuid = require('node-uuid');

  Config = require('./config').Config;

  UserManager = require('./UserManager').UserManager;

  QueueManager = (function() {
    function QueueManager(io) {
      this.io = io;
      this.gamesArray = [];
      (function(queue) {
        io.of('/').on('connection', function(socket) {
          var user;
          user = UserManager.getUser(socket.id);
          if (!user) {
            socket.emit('playerNotFound');
            console.log('playerNotFound, at queuemanager/main');
            return socket.on('addPlayer', function(playerInfo) {
              return UserManager.setUser(socket, playerInfo);
            });
          } else {
            socket.emit('playerFound', user);
            return console.log('playerFound');
          }
        });
        return io.of('/matchmaking').on('connection', function(socket) {
          var user;
          console.log('matchmaking connected', socket.id);
          user = UserManager.getUser(socket.id);
          console.log(user, 'user');
          if (user === void 0) {
            console.log('emitting playernotfound at matchmaking');
            socket.emit('playerNotFound, at queue');
            socket.on('addPlayer', function(playerInfo) {
              UserManager.setUser(socket, playerInfo);
              socket.playerName = playerInfo.name;
              return queue.beginQueue(socket);
            });
          } else {
            console.log(socket.id, 'playerFound');
            socket.playerName = user.name;
            console.log(socket.playerName, 'matchmaking name');
            socket.emit('playerFound', user);
          }
          return socket.on('joinQueue', function() {
            return queue.beginQueue(socket);
          });
        });
      })(this);
    }

    QueueManager.prototype.beginQueue = function(socket) {
      var game, gameObject, gamefound, newNamespace, queueLength, randomName, removedGame, _results;
      socket.emit('beginQueue');
      console.log('beginqueue');
      gamefound = false;
      _results = [];
      while (!gamefound) {
        console.log('searching for game');
        queueLength = this.gamesArray.length;
        if (queueLength !== 0) {
          if (this.gamesArray[queueLength - 1].game.checkStatus()) {
            socket.emit('match_found', this.gamesArray[queueLength - 1].namespace.name);
            gamefound = true;
            _results.push(console.log('found new game'));
          } else {
            removedGame = this.gamesArray.pop().game.outOfQueue();
            _results.push(console.log(removedGame));
          }
        } else {
          console.log('making new game');
          randomName = uuid.v4();
          randomName = '/' + randomName.split('-').join('');
          newNamespace = this.io.of(randomName);
          console.log(newNamespace.name);
          game = new GameLobby(this.io, newNamespace, this, new Config(['mafia', 'villager', 'villager']));
          gameObject = {
            game: game,
            namespace: newNamespace
          };
          this.gamesArray.push(gameObject);
          _results.push(console.log('made new game'));
        }
      }
      return _results;
    };

    QueueManager.prototype.addToQueue = function(game) {
      return this.gamesArray.push(game);
    };

    return QueueManager;

  })();

  exports.QueueManager = QueueManager;

}).call(this);

/*
//@ sourceMappingURL=QueueManager.map
*/
